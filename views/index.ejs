<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Hidropon√≠a</title>
    
    <!-- Meta tags para prevenir HTTPS -->
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <meta http-equiv="X-Content-Type-Options" content="nosniff">
    <meta http-equiv="Origin-Agent-Cluster" content="?0">
    
    <!-- CDN Links - Configuraci√≥n centralizada -->
    <!-- Bootstrap 5 CSS -->
    <link href="http://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="http://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Chart.js -->
    <script src="http://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <!-- Barra de Navegaci√≥n Verde -->
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a class="navbar-brand" href="/">
                üå± AutoHidro
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/">üè† Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/scheduler">üìÖ Programador</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/logs">üìã Logs</a>
                    </li>
                </ul>
                
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            üë§ Usuario
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/profile">üë§ Perfil</a></li>
                            <li><a class="dropdown-item" href="/security">üîí Seguridad</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#" onclick="logout()">üö™ Cerrar Sesi√≥n</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- ===== HEADER ===== -->
        <div class="header">
            <h1>üå± AutoHidro</h1>
            <p class="subtitle">Sistema de Control de Hidroponia Inteligente</p>
        </div>

        <!-- ===== RELOJ DEL SISTEMA ===== -->
        <div class="system-clock">
            <div class="clock-time" id="clock-time">--:--:--</div>
            <div class="clock-date" id="clock-date">--/--/----</div>
        </div>

        <!-- ===== CONTROL DE REL√âS/V√ÅLVULAS ===== -->
        <div class="section">
            <h3>üíß Control de V√°lvulas de Riego</h3>
            <div class="relay-grid">
                <div class="relay-item">
                    <div class="relay-title">üíß V√°lvula 1</div>
                    <div class="relay-status" id="rele1-status">Desconocido</div>
                    <button class="btn btn-on" onclick="controlRele(1, true)">ON</button>
                    <button class="btn btn-off" onclick="controlRele(1, false)">OFF</button>
                </div>
                
                <div class="relay-item">
                    <div class="relay-title">üíß V√°lvula 2</div>
                    <div class="relay-status" id="rele2-status">Desconocido</div>
                    <button class="btn btn-on" onclick="controlRele(2, true)">ON</button>
                    <button class="btn btn-off" onclick="controlRele(2, false)">OFF</button>
                </div>
                
                <div class="relay-item">
                    <div class="relay-title">üíß V√°lvula 3</div>
                    <div class="relay-status" id="rele3-status">Desconocido</div>
                    <button class="btn btn-on" onclick="controlRele(3, true)">ON</button>
                    <button class="btn btn-off" onclick="controlRele(3, false)">OFF</button>
                </div>
                
                <div class="relay-item">
                    <div class="relay-title">üíß V√°lvula 4</div>
                    <div class="relay-status" id="rele4-status">Desconocido</div>
                    <button class="btn btn-on" onclick="controlRele(4, true)">ON</button>
                    <button class="btn btn-off" onclick="controlRele(4, false)">OFF</button>
                </div>
            </div>
        </div>

        <!-- ===== INFORMACI√ìN DE SENSORES ===== -->
        <div class="section">
            <h3>üìä Estado del Sistema</h3>
            <div class="relay-grid">
                <div class="info-card">
                    <h4>üå°Ô∏è Temperatura</h4>
                    <div class="info-value" id="temperature">--</div>
                    <div class="info-unit">¬∞C</div>
                </div>
                
                <div class="info-card">
                    <h4>üíß Humedad</h4>
                    <div class="info-value" id="humidity">--</div>
                    <div class="info-unit">%</div>
                </div>
                
                <div class="info-card">
                    <h4>üîå Estado Sistema</h4>
                    <div class="info-value" id="system-status">Online</div>
                    <div class="info-unit">Conectado</div>
                </div>
                
                <div class="info-card">
                    <h4>‚è∞ √öltima Lectura</h4>
                    <div class="info-value" id="last-reading">--:--</div>
                    <div class="info-unit">Hoy</div>
                </div>
            </div>
        </div>

        <!-- ===== GR√ÅFICOS ===== -->
        <div class="section">
            <h3>üìà Historial de Sensores</h3>
            <div class="chart-container">
                <canvas id="sensorChart" width="400" height="200"></canvas>
            </div>
        </div>

        <!-- ===== ACCIONES R√ÅPIDAS ===== -->
        <div class="section">
            <h3>‚ö° Acciones R√°pidas</h3>
            <div class="info-card">
                <div class="info-links">
                    <a href="/scheduler" class="btn btn-secondary">üìÖ Programar Riego</a>
                    <a href="/logs" class="btn btn-secondary">üìã Ver Logs</a>
                    <button class="btn btn-on" onclick="emergencyStop()">üõë Parada de Emergencia</button>
                    <button class="btn btn-secondary" onclick="refreshData()">üîÑ Actualizar Datos</button>
                </div>
            </div>
        </div>

        <!-- ===== FOOTER ===== -->
        <div class="footer">
            <p>Sistema AutoHidro - Control de Hidroponia Automatizado</p>
            <p>Desarrollado con Node.js y Raspberry Pi</p>
        </div>
    </div>

    <!-- Bootstrap 5 JS -->
    <script src="http://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script src="/js/main.js"></script>
    
    <script>
    // ===== VARIABLES GLOBALES =====
    let socket = null;
    let sensorChart = null;
    let lastData = {
        temperature: 0,
        humidity: 0,
        timestamp: new Date()
    };

    // ===== INICIALIZACI√ìN =====
    document.addEventListener('DOMContentLoaded', function() {
        initializeClock();
        initializeSocket();
        initializeChart();
        refreshData();
        
        // Actualizar datos cada 5 segundos
        setInterval(refreshData, 5000);
    });

    // ===== RELOJ DEL SISTEMA =====
    function initializeClock() {
        function updateClock() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('es-ES');
            const dateString = now.toLocaleDateString('es-ES');
            
            document.getElementById('clock-time').textContent = timeString;
            document.getElementById('clock-date').textContent = dateString;
        }
        
        updateClock();
        setInterval(updateClock, 1000);
    }

    // ===== SOCKET.IO =====
    function initializeSocket() {
        try {
            if (typeof io !== 'undefined') {
                socket = io({
                    transports: ['websocket', 'polling'],
                    timeout: 20000,
                    forceNew: true
                });

                socket.on('connect', function() {
                    console.log('Conectado al servidor');
                    document.getElementById('system-status').textContent = 'Online';
                    document.getElementById('system-status').className = 'info-value text-green';
                });

                socket.on('disconnect', function() {
                    console.log('Desconectado del servidor');
                    document.getElementById('system-status').textContent = 'Offline';
                    document.getElementById('system-status').className = 'info-value text-dark-green';
                });

                socket.on('connect_error', function(error) {
                    console.error('Error de conexi√≥n:', error);
                    showNotification('Error de conexi√≥n con el servidor', 'error');
                });

                socket.on('sensor_data', function(data) {
                    updateSensorData(data);
                });

                socket.on('rele_status', function(data) {
                    updateReleStatus(data);
                });

            } else {
                console.warn('Socket.IO no disponible');
                showNotification('Socket.IO no disponible - Modo offline', 'warning');
            }
        } catch (error) {
            console.error('Error inicializando Socket.IO:', error);
            showNotification('Error inicializando conexi√≥n', 'danger');
        }
    }

    // ===== ACTUALIZAR DATOS DE SENSORES =====
    function updateSensorData(data) {
        if (data.temperature !== undefined) {
            document.getElementById('temperature').textContent = data.temperature.toFixed(1);
            lastData.temperature = data.temperature;
        }
        
        if (data.humidity !== undefined) {
            document.getElementById('humidity').textContent = data.humidity.toFixed(1);
            lastData.humidity = data.humidity;
        }
        
        if (data.timestamp) {
            const time = new Date(data.timestamp);
            document.getElementById('last-reading').textContent = time.toLocaleTimeString('es-ES', {
                hour: '2-digit',
                minute: '2-digit'
            });
            lastData.timestamp = time;
        }
        
        updateChart();
    }

    // ===== ACTUALIZAR ESTADO DE REL√âS =====
    function updateReleStatus(data) {
        for (let i = 1; i <= 4; i++) {
            const statusElement = document.getElementById(`rele${i}-status`);
            if (statusElement && data[`rele${i}`] !== undefined) {
                const isOn = data[`rele${i}`];
                statusElement.textContent = isOn ? 'Encendido' : 'Apagado';
                statusElement.className = `relay-status ${isOn ? 'on' : 'off'}`;
            }
        }
    }

    // ===== CONTROL DE REL√âS =====
    function controlRele(releId, state) {
        const action = state ? 'encender' : 'apagar';
        
        if (socket && socket.connected) {
            socket.emit('control_rele', { rele: releId, state: state });
            showNotification(`Comando enviado: ${action} v√°lvula ${releId}`, 'info');
        } else {
            // Fallback: llamada HTTP directa
            fetch(`/api/rele/${releId}/${state ? 'on' : 'off'}`, {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showNotification(`V√°lvula ${releId} ${action} correctamente`, 'success');
                    updateReleStatus({ [`rele${releId}`]: state });
                } else {
                    showNotification(`Error al ${action} v√°lvula ${releId}`, 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification(`Error de comunicaci√≥n`, 'error');
            });
        }
    }

    // ===== GR√ÅFICO DE SENSORES =====
    function initializeChart() {
        const ctx = document.getElementById('sensorChart').getContext('2d');
        
        sensorChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Temperatura (¬∞C)',
                    data: [],
                    borderColor: '#4CAF50',
                    backgroundColor: 'rgba(76, 175, 80, 0.1)',
                    tension: 0.4
                }, {
                    label: 'Humedad (%)',
                    data: [],
                    borderColor: '#2196F3',
                    backgroundColor: 'rgba(33, 150, 243, 0.1)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#2E7D32',
                            font: {
                                weight: 'bold'
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#666'
                        },
                        grid: {
                            color: 'rgba(0,0,0,0.1)'
                        }
                    },
                    y: {
                        ticks: {
                            color: '#666'
                        },
                        grid: {
                            color: 'rgba(0,0,0,0.1)'
                        }
                    }
                }
            }
        });
    }

    function updateChart() {
        if (!sensorChart) return;
        
        const now = new Date();
        const timeString = now.toLocaleTimeString('es-ES', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        // Agregar nuevos datos
        sensorChart.data.labels.push(timeString);
        sensorChart.data.datasets[0].data.push(lastData.temperature);
        sensorChart.data.datasets[1].data.push(lastData.humidity);
        
        // Mantener solo los √∫ltimos 20 puntos
        if (sensorChart.data.labels.length > 20) {
            sensorChart.data.labels.shift();
            sensorChart.data.datasets[0].data.shift();
            sensorChart.data.datasets[1].data.shift();
        }
        
        sensorChart.update('none');
    }

    // ===== FUNCIONES UTILITARIAS =====
    function refreshData() {
        fetch('http://192.168.1.39:3000/api/sensors/current')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateSensorData(data.data);
                }
            })
            .catch(error => {
                console.error('Error actualizando datos:', error);
            });
    }

    function emergencyStop() {
        if (confirm('¬øEst√°s seguro de que quieres activar la parada de emergencia? Esto apagar√° todas las v√°lvulas.')) {
            for (let i = 1; i <= 4; i++) {
                controlRele(i, false);
            }
            showNotification('Parada de emergencia activada', 'warning');
        }
    }

    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    function logout() {
        if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
            showNotification('Cerrando sesi√≥n...', 'warning');
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        }
    }

    // ===== FORZAR PROTOCOLO HTTP =====
    function forceHttpProtocol() {
        // Redirigir inmediatamente si estamos en HTTPS
        if (window.location.protocol === 'https:') {
            const newUrl = window.location.href.replace('https:', 'http:');
            window.location.replace(newUrl);
            return;
        }
        
        // Verificar que todos los enlaces sean HTTP
        document.querySelectorAll('a[href]').forEach(link => {
            if (link.href.startsWith('https:')) {
                link.href = link.href.replace('https:', 'http:');
            }
        });
        
        // Verificar que todos los formularios sean HTTP
        document.querySelectorAll('form[action]').forEach(form => {
            if (form.action.startsWith('https:')) {
                form.action = form.action.replace('https:', 'http:');
            }
        });
    }

    // Ejecutar al cargar
    forceHttpProtocol();

    // Prevenir enlaces HTTPS de manera m√°s agresiva
    document.addEventListener('click', function(e) {
        if (e.target.tagName === 'A' && e.target.href && e.target.href.startsWith('https:')) {
            e.preventDefault();
            e.target.href = e.target.href.replace('https:', 'http:');
            e.target.click();
        }
    });

    // Prevenir formularios HTTPS de manera m√°s agresiva
    document.addEventListener('submit', function(e) {
        if (e.target.action && e.target.action.startsWith('https:')) {
            e.preventDefault();
            e.target.action = e.target.action.replace('https:', 'http:');
            e.target.submit();
        }
    });

    // Interceptar todas las peticiones fetch para forzar HTTP
    const originalFetch = window.fetch;
    window.fetch = function(url, options) {
        if (typeof url === 'string' && url.startsWith('https:')) {
            url = url.replace('https:', 'http:');
        }
        return originalFetch(url, options);
    };

    // Interceptar todas las peticiones XMLHttpRequest para forzar HTTP
    const originalXHROpen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(method, url, ...args) {
        if (typeof url === 'string' && url.startsWith('https:')) {
            url = url.replace('https:', 'http:');
        }
        return originalXHROpen.call(this, method, url, ...args);
    };

    // Observar cambios en el DOM para interceptar nuevos enlaces
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(function(node) {
                    if (node.nodeType === 1) { // Element node
                        // Verificar enlaces
                        if (node.tagName === 'A' && node.href && node.href.startsWith('https:')) {
                            node.href = node.href.replace('https:', 'http:');
                        }
                        // Verificar formularios
                        if (node.tagName === 'FORM' && node.action && node.action.startsWith('https:')) {
                            node.action = node.action.replace('https:', 'http:');
                        }
                        // Verificar elementos hijos
                        const links = node.querySelectorAll ? node.querySelectorAll('a[href]') : [];
                        const forms = node.querySelectorAll ? node.querySelectorAll('form[action]') : [];
                        
                        links.forEach(link => {
                            if (link.href.startsWith('https:')) {
                                link.href = link.href.replace('https:', 'http:');
                            }
                        });
                        
                        forms.forEach(form => {
                            if (form.action.startsWith('https:')) {
                                form.action = form.action.replace('https:', 'http:');
                            }
                        });
                    }
                });
            }
        });
    });

    // Iniciar observaci√≥n
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    // Forzar HTTP cada segundo durante los primeros 10 segundos
    let httpForceCount = 0;
    const httpForceInterval = setInterval(() => {
        forceHttpProtocol();
        httpForceCount++;
        if (httpForceCount >= 10) {
            clearInterval(httpForceInterval);
        }
    }, 1000);
    </script>
</body>
</html>