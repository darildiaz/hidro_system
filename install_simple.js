#!/usr/bin/env node

/**
 * Script de Instalaci√≥n Simplificada
 * Sistema de Hidropon√≠a Automatizado
 * Evita problemas de compilaci√≥n nativa
 * Ing. Daril D√≠az - 2024
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üå± Instalando Sistema de Hidropon√≠a (Modo Simplificado)...\n');

// Colores para la consola
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
    log(`\n[${step}] ${message}`, 'cyan');
}

function logSuccess(message) {
    log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
    log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
    log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
    log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// Verificar Node.js
logStep('1', 'Verificando requisitos del sistema...');

try {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
    
    if (majorVersion < 16) {
        logError(`Node.js ${nodeVersion} detectado. Se requiere Node.js 16 o superior.`);
        process.exit(1);
    }
    
    logSuccess(`Node.js ${nodeVersion} detectado`);
} catch (error) {
    logError('Error verificando versi√≥n de Node.js');
    process.exit(1);
}

// Verificar npm
try {
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    logSuccess(`npm ${npmVersion} detectado`);
} catch (error) {
    logError('npm no est√° instalado o no es accesible');
    process.exit(1);
}

// Crear directorios necesarios
logStep('2', 'Creando estructura de directorios...');

const directories = [
    'data',
    'logs',
    'backups',
    'public/css',
    'public/js',
    'public/img',
    'views'
];

directories.forEach(dir => {
    try {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
            logSuccess(`Directorio creado: ${dir}`);
        } else {
            logInfo(`Directorio ya existe: ${dir}`);
        }
    } catch (error) {
        logError(`Error creando directorio ${dir}: ${error.message}`);
    }
});

// Instalar dependencias b√°sicas (sin compilaci√≥n nativa)
logStep('3', 'Instalando dependencias b√°sicas...');

const basicDependencies = [
    'express',
    'socket.io',
    'ejs',
    'body-parser',
    'sqlite3',
    'node-cron',
    'moment',
    'shelljs',
    'winston',
    'helmet',
    'compression',
    'cors'
];

try {
    logInfo('Instalando dependencias principales...');
    
    // Instalar cada dependencia individualmente para evitar problemas
    basicDependencies.forEach(dep => {
        try {
            logInfo(`Instalando ${dep}...`);
            execSync(`npm install ${dep}`, { stdio: 'pipe' });
            logSuccess(`${dep} instalado`);
        } catch (error) {
            logWarning(`Error instalando ${dep}: ${error.message}`);
        }
    });
    
    logSuccess('Dependencias b√°sicas instaladas');
    
} catch (error) {
    logError('Error instalando dependencias b√°sicas');
}

// Instalar dependencias de desarrollo
logStep('4', 'Instalando dependencias de desarrollo...');

try {
    logInfo('Instalando dependencias de desarrollo...');
    execSync('npm install --only=dev', { stdio: 'pipe' });
    logSuccess('Dependencias de desarrollo instaladas');
} catch (error) {
    logWarning('Error instalando dependencias de desarrollo');
}

// Instalar rpio (GPIO) por separado
logStep('5', 'Instalando controlador GPIO...');

try {
    logInfo('Instalando rpio para control GPIO...');
    execSync('npm install rpio', { stdio: 'pipe' });
    logSuccess('rpio instalado correctamente');
} catch (error) {
    logWarning('Error instalando rpio. El control GPIO no funcionar√°.');
    logInfo('El sistema funcionar√° en modo simulaci√≥n para GPIO');
}

// Verificar archivos de configuraci√≥n
logStep('6', 'Verificando archivos del sistema...');

const requiredFiles = [
    'package.json',
    'config.js',
    'app.js',
    'database.js',
    'gpio_controller.js',
    'scheduler.js',
    'dht11_sensor.js'
];

let missingFiles = [];

requiredFiles.forEach(file => {
    if (fs.existsSync(file)) {
        logSuccess(`Archivo encontrado: ${file}`);
    } else {
        logError(`Archivo faltante: ${file}`);
        missingFiles.push(file);
    }
});

if (missingFiles.length > 0) {
    logWarning('Algunos archivos requeridos est√°n faltando');
    logWarning('Aseg√∫rese de que todos los archivos del sistema est√©n presentes');
}

// Verificar plantillas HTML
logStep('7', 'Verificando plantillas HTML...');

const requiredViews = [
    'views/base.ejs',
    'views/index.ejs',
    'views/error.ejs'
];

requiredViews.forEach(view => {
    if (fs.existsSync(view)) {
        logSuccess(`Plantilla encontrada: ${view}`);
    } else {
        logWarning(`Plantilla faltante: ${view}`);
    }
});

// Verificar archivos est√°ticos
logStep('8', 'Verificando archivos est√°ticos...');

const requiredStatic = [
    'public/css/style.css',
    'public/js/main.js'
];

requiredStatic.forEach(staticFile => {
    if (fs.existsSync(staticFile)) {
        logSuccess(`Archivo est√°tico encontrado: ${staticFile}`);
    } else {
        logWarning(`Archivo est√°tico faltante: ${staticFile}`);
    }
});

// Crear archivo .env de ejemplo
logStep('9', 'Creando archivo de configuraci√≥n de entorno...');

const envExample = `# Configuraci√≥n del Sistema de Hidropon√≠a
# Copie este archivo a .env y ajuste los valores seg√∫n su configuraci√≥n

# Puerto del servidor
PORT=3000

# Entorno de ejecuci√≥n
NODE_ENV=production

# Configuraci√≥n de la base de datos
DB_PATH=./data/auto_hidro.db

# Configuraci√≥n de logs
LOG_LEVEL=info

# Configuraci√≥n de respaldos
BACKUP_ENABLED=true
BACKUP_FREQUENCY=24

# Configuraci√≥n de notificaciones
EMAIL_ENABLED=false
TELEGRAM_ENABLED=false

# Configuraci√≥n de seguridad
SESSION_SECRET=your-secret-key-here
`;

try {
    if (!fs.existsSync('.env.example')) {
        fs.writeFileSync('.env.example', envExample);
        logSuccess('Archivo .env.example creado');
    } else {
        logInfo('Archivo .env.example ya existe');
    }
} catch (error) {
    logError(`Error creando .env.example: ${error.message}`);
}

// Crear scripts de control
logStep('10', 'Creando scripts de control...');

const startScript = `#!/bin/bash
# Script de inicio del Sistema de Hidropon√≠a

echo "üå± Iniciando Sistema de Hidropon√≠a Automatizado..."

# Verificar si Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado"
    exit 1
fi

# Verificar si las dependencias est√°n instaladas
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalando dependencias..."
    npm install
fi

# Iniciar la aplicaci√≥n
echo "üöÄ Iniciando aplicaci√≥n..."
node app.js
`;

const stopScript = `#!/bin/bash
# Script de parada del Sistema de Hidropon√≠a

echo "üõë Deteniendo Sistema de Hidropon√≠a Automatizado..."

# Buscar proceso de Node.js ejecutando la aplicaci√≥n
PID=$(pgrep -f "node app.js")

if [ -n "$PID" ]; then
    echo "Deteniendo proceso $PID..."
    kill $PID
    echo "‚úÖ Sistema detenido"
else
    echo "‚ÑπÔ∏è  No se encontr√≥ el sistema en ejecuci√≥n"
fi
`;

const restartScript = `#!/bin/bash
# Script de reinicio del Sistema de Hidropon√≠a

echo "üîÑ Reiniciando Sistema de Hidropon√≠a Automatizado..."

# Detener sistema
./stop.sh

# Esperar un momento
sleep 2

# Iniciar sistema
./start.sh
`;

const statusScript = `#!/bin/bash
# Script de estado del Sistema de Hidropon√≠a

echo "üìä Estado del Sistema de Hidropon√≠a Automatizado"

# Verificar si el proceso est√° ejecut√°ndose
PID=$(pgrep -f "node app.js")

if [ -n "$PID" ]; then
    echo "‚úÖ Sistema en ejecuci√≥n (PID: $PID)"
    echo "üìÖ Iniciado: $(ps -o lstart= -p $PID)"
    echo "‚è±Ô∏è  Uptime: $(ps -o etime= -p $PID)"
    
    # Verificar uso de memoria
    if [ -n "$PID" ]; then
        MEMORY=$(ps -o rss= -p $PID)
        MEMORY_MB=$((MEMORY / 1024))
        echo "üíæ Memoria: ${MEMORY_MB} MB"
    fi
else
    echo "‚ùå Sistema no est√° ejecut√°ndose"
fi
`;

try {
    fs.writeFileSync('start.sh', startScript);
    fs.writeFileSync('stop.sh', stopScript);
    fs.writeFileSync('restart.sh', restartScript);
    fs.writeFileSync('status.sh', statusScript);
    
    // Dar permisos de ejecuci√≥n (solo en sistemas Unix)
    if (process.platform !== 'win32') {
        execSync('chmod +x start.sh stop.sh restart.sh status.sh');
    }
    
    logSuccess('Scripts de control creados');
} catch (error) {
    logError(`Error creando scripts: ${error.message}`);
}

// Crear archivo README de instalaci√≥n
logStep('11', 'Creando documentaci√≥n de instalaci√≥n...');

const installReadme = `# Gu√≠a de Instalaci√≥n Simplificada - Sistema de Hidropon√≠a

## Requisitos Previos

- Node.js 16 o superior
- npm (incluido con Node.js)
- Raspberry Pi 3B o superior (para funcionalidad GPIO completa)
- Sensor DHT11
- 4 m√≥dulos rel√©

## Instalaci√≥n Simplificada

La instalaci√≥n simplificada ya se ha ejecutado. Esta versi√≥n evita problemas de compilaci√≥n nativa.

### Caracter√≠sticas de la Instalaci√≥n Simplificada:

‚úÖ **Dependencias b√°sicas** instaladas sin problemas
‚úÖ **Controlador GPIO** instalado (si es posible)
‚úÖ **Sensor DHT11** en modo simulaci√≥n (compatible)
‚úÖ **Sistema completo** funcional

## Instalaci√≥n Manual

### 1. Instalar dependencias
\`\`\`bash
npm install
\`\`\`

### 2. Configurar variables de entorno
\`\`\`bash
cp .env.example .env
# Editar .env con su configuraci√≥n
\`\`\`

### 3. Iniciar el sistema
\`\`\`bash
./start.sh
# O manualmente:
node app.js
\`\`\`

## Scripts de Control

- \`./start.sh\` - Iniciar sistema
- \`./stop.sh\` - Detener sistema
- \`./restart.sh\` - Reiniciar sistema
- \`./status.sh\` - Ver estado del sistema

## Acceso Web

Una vez iniciado, acceda a:
http://localhost:3000

## Modo Simulaci√≥n

Si el control GPIO no est√° disponible, el sistema funcionar√° en modo simulaci√≥n:
- Los rel√©s se simular√°n (no se activar√°n f√≠sicamente)
- El sensor DHT11 generar√° datos simulados
- Todas las funcionalidades web estar√°n disponibles

## Soluci√≥n de Problemas

### Error: "Module not found"
\`\`\`bash
npm install
\`\`\`

### Error: "Permission denied" en scripts
\`\`\`bash
chmod +x *.sh
\`\`\`

### Error: GPIO no disponible
- El sistema funcionar√° en modo simulaci√≥n
- Para control real, verificar permisos de usuario para GPIO
- Verificar conexiones f√≠sicas

## Soporte

Para soporte t√©cnico, contacte al desarrollador:
Ing. Daril D√≠az
`;

try {
    fs.writeFileSync('INSTALACION_SIMPLIFICADA.md', installReadme);
    logSuccess('Documentaci√≥n de instalaci√≥n simplificada creada');
} catch (error) {
    logError(`Error creando documentaci√≥n: ${error.message}`);
}

// Verificaci√≥n final
logStep('12', 'Verificaci√≥n final del sistema...');

let systemReady = true;

// Verificar que la aplicaci√≥n se puede iniciar
try {
    // Intentar cargar la configuraci√≥n
    const config = require('./config.js');
    logSuccess('Configuraci√≥n cargada correctamente');
} catch (error) {
    logError(`Error cargando configuraci√≥n: ${error.message}`);
    systemReady = false;
}

// Verificar que la base de datos se puede inicializar
try {
    const Database = require('./database.js');
    logSuccess('M√≥dulo de base de datos cargado correctamente');
} catch (error) {
    logError(`Error cargando m√≥dulo de base de datos: ${error.message}`);
    systemReady = false;
}

// Verificar que el sensor DHT11 se puede cargar
try {
    const DHT11Sensor = require('./dht11_sensor.js');
    logSuccess('M√≥dulo de sensor DHT11 cargado correctamente');
} catch (error) {
    logError(`Error cargando m√≥dulo de sensor DHT11: ${error.message}`);
    systemReady = false;
}

// Verificar que el controlador GPIO se puede cargar
try {
    const GPIOController = require('./gpio_controller.js');
    logSuccess('M√≥dulo de controlador GPIO cargado correctamente');
} catch (error) {
    logWarning(`Error cargando m√≥dulo de controlador GPIO: ${error.message}`);
    logWarning('Esto es normal en sistemas que no son Raspberry Pi');
}

// Verificar que el programador se puede cargar
try {
    const Scheduler = require('./scheduler.js');
    logSuccess('M√≥dulo de programador cargado correctamente');
} catch (error) {
    logError(`Error cargando m√≥dulo de programador: ${error.message}`);
    systemReady = false;
}

// Verificar que la aplicaci√≥n principal se puede cargar
try {
    const app = require('./app.js');
    logSuccess('Aplicaci√≥n principal cargada correctamente');
} catch (error) {
    logError(`Error cargando aplicaci√≥n principal: ${error.message}`);
    systemReady = false;
}

// Resumen final
console.log('\n' + '='.repeat(60));
if (systemReady) {
    log('\nüéâ ¬°INSTALACI√ìN SIMPLIFICADA COMPLETADA EXITOSAMENTE!', 'green');
    log('\nüìã Resumen de la instalaci√≥n:', 'cyan');
    log('‚úÖ Node.js y npm verificados', 'green');
    log('‚úÖ Dependencias b√°sicas instaladas', 'green');
    log('‚úÖ Estructura de directorios creada', 'green');
    log('‚úÖ Scripts de control generados', 'green');
    log('‚úÖ Documentaci√≥n creada', 'green');
    log('‚úÖ M√≥dulo DHT11 alternativo creado', 'green');
    
    log('\nüöÄ Para iniciar el sistema:', 'yellow');
    log('   ./start.sh', 'bright');
    log('   O manualmente: node app.js', 'bright');
    
    log('\nüåê Acceso web: http://localhost:3000', 'yellow');
    
    log('\nüìö Documentaci√≥n: INSTALACION_SIMPLIFICADA.md', 'cyan');
    
    log('\n‚ö†Ô∏è  NOTA: Esta instalaci√≥n evita problemas de compilaci√≥n nativa', 'yellow');
    log('   El sistema funcionar√° en modo simulaci√≥n si GPIO no est√° disponible', 'yellow');
    
} else {
    log('\n‚ö†Ô∏è  INSTALACI√ìN COMPLETADA CON ADVERTENCIAS', 'yellow');
    log('\n‚ùå Algunos m√≥dulos no se pudieron cargar', 'red');
    log('   Verifique los errores anteriores y corrija los problemas', 'red');
    log('   Luego ejecute nuevamente: node install_simple.js', 'red');
}

console.log('\n' + '='.repeat(60));
log('\nüå± Sistema de Hidropon√≠a Automatizado - Ing. Daril D√≠az ¬© 2024', 'magenta');
log('üîß Instalaci√≥n Simplificada - Sin problemas de compilaci√≥n', 'cyan');
console.log(''); 