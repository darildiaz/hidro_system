#!/usr/bin/env node

/**
 * Prueba de los Rel√©s
 * Sistema de Hidropon√≠a Automatizado
 * Ing. Daril D√≠az - 2024
 */

const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(colors[color] + message + colors.reset);
}

async function testRelays() {
    try {
        log('\nüîå PRUEBA DE LOS REL√âS', 'magenta');
        log('üîß Sistema de Hidropon√≠a Automatizado', 'cyan');
        log('üë®‚Äçüíª Ing. Daril D√≠az - 2024', 'blue');
        log('='.repeat(60), 'cyan');

        // Paso 1: Verificar que el m√≥dulo existe
        log('\n[1] Verificando m√≥dulo GPIO Controller...', 'cyan');
        if (!require('fs').existsSync('./gpio_controller.js')) {
            log('‚ùå M√≥dulo gpio_controller.js no encontrado', 'red');
            return;
        }
        log('‚úÖ M√≥dulo gpio_controller.js encontrado', 'green');

        // Paso 2: Cargar el m√≥dulo
        log('\n[2] Cargando m√≥dulo GPIO Controller...', 'cyan');
        let GPIOController;
        try {
            GPIOController = require('./gpio_controller.js');
            log('‚úÖ M√≥dulo GPIO Controller cargado correctamente', 'green');
        } catch (error) {
            log(`‚ùå Error cargando m√≥dulo: ${error.message}`, 'red');
            return;
        }

        // Paso 3: Crear instancia del controlador
        log('\n[3] Creando instancia del controlador...', 'cyan');
        let controller;
        try {
            controller = new GPIOController();
            log('‚úÖ Instancia del controlador creada', 'green');
        } catch (error) {
            log(`‚ùå Error creando instancia: ${error.message}`, 'red');
            return;
        }

        // Paso 4: Verificar informaci√≥n del sistema
        log('\n[4] Informaci√≥n del sistema...', 'cyan');
        try {
            const systemInfo = controller.getSystemInfo();
            log(`   üñ•Ô∏è  Plataforma: ${systemInfo.platform}`, 'blue');
            log(`   üîß Arquitectura: ${systemInfo.architecture}`, 'blue');
            log(`   üìä Modo GPIO: ${systemInfo.gpioMode}`, 'blue');
            log(`   üîå Pines disponibles: ${systemInfo.availablePins.join(', ')}`, 'blue');
        } catch (error) {
            log(`   ‚ö†Ô∏è  No se pudo obtener informaci√≥n: ${error.message}`, 'yellow');
        }

        // Paso 5: Probar estado inicial de los rel√©s
        log('\n[5] Estado inicial de los rel√©s...', 'cyan');
        try {
            const initialStates = controller.getAllReleStates();
            log('   üìä Estado inicial:', 'blue');
            for (let i = 0; i < initialStates.length; i++) {
                const state = initialStates[i];
                const status = state.active ? 'üü¢ ACTIVO' : 'üî¥ INACTIVO';
                log(`      Rel√© ${i + 1}: ${status}`, state.active ? 'green' : 'red');
            }
        } catch (error) {
            log(`   ‚ùå Error obteniendo estados: ${error.message}`, 'red');
        }

        // Paso 6: Probar control de cada rel√©
        log('\n[6] Probando control de rel√©s...', 'cyan');
        log('   ‚ö†Ô∏è  ADVERTENCIA: En modo simulaci√≥n, los rel√©s no se activar√°n f√≠sicamente', 'yellow');
        
        for (let releId = 1; releId <= 4; releId++) {
            try {
                log(`\n   üîå Probando Rel√© ${releId}:`, 'cyan');
                
                // Activar rel√©
                log(`      Activando rel√© ${releId}...`, 'yellow');
                const activateResult = controller.controlRele(releId, true, 'Prueba de activaci√≥n');
                
                if (activateResult) {
                    log(`      ‚úÖ Rel√© ${releId} activado correctamente`, 'green');
                } else {
                    log(`      ‚ùå Error activando rel√© ${releId}`, 'red');
                }
                
                // Verificar estado
                await new Promise(resolve => setTimeout(resolve, 1000));
                const states = controller.getAllReleStates();
                const currentState = states[releId - 1];
                
                if (currentState && currentState.active) {
                    log(`      ‚úÖ Estado confirmado: ACTIVO`, 'green');
                } else {
                    log(`      ‚ö†Ô∏è  Estado no confirmado`, 'yellow');
                }
                
                // Desactivar rel√©
                log(`      Desactivando rel√© ${releId}...`, 'yellow');
                const deactivateResult = controller.controlRele(releId, false, 'Prueba de desactivaci√≥n');
                
                if (deactivateResult) {
                    log(`      ‚úÖ Rel√© ${releId} desactivado correctamente`, 'green');
                } else {
                    log(`      ‚ùå Error desactivando rel√© ${releId}`, 'red');
                }
                
                // Esperar entre rel√©s
                if (releId < 4) {
                    log(`      ‚è≥ Esperando 1 segundo...`, 'yellow');
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
                
            } catch (error) {
                log(`      ‚ùå Error probando rel√© ${releId}: ${error.message}`, 'red');
            }
        }

        // Paso 7: Probar control m√∫ltiple
        log('\n[7] Probando control m√∫ltiple...', 'cyan');
        try {
            log('   üîÑ Activando todos los rel√©s...', 'yellow');
            for (let i = 1; i <= 4; i++) {
                controller.controlRele(i, true, 'Prueba m√∫ltiple');
            }
            
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const allActiveStates = controller.getAllReleStates();
            const activeCount = allActiveStates.filter(state => state.active).length;
            log(`   üìä Rel√©s activos: ${activeCount}/4`, 'blue');
            
            log('   üîÑ Desactivando todos los rel√©s...', 'yellow');
            for (let i = 1; i <= 4; i++) {
                controller.controlRele(i, false, 'Prueba m√∫ltiple');
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const allInactiveStates = controller.getAllReleStates();
            const inactiveCount = allInactiveStates.filter(state => !state.active).length;
            log(`   üìä Rel√©s inactivos: ${inactiveCount}/4`, 'blue');
            
        } catch (error) {
            log(`   ‚ùå Error en control m√∫ltiple: ${error.message}`, 'red');
        }

        // Paso 8: Verificar modo simulaci√≥n
        log('\n[8] Verificando modo de operaci√≥n...', 'cyan');
        try {
            const systemInfo = controller.getSystemInfo();
            if (systemInfo.gpioMode === 'simulation') {
                log('‚úÖ Modo simulaci√≥n activo', 'green');
                log('   üì± Los rel√©s se simulan (no se activan f√≠sicamente)', 'blue');
                log('   üîå Perfecto para desarrollo y pruebas', 'blue');
            } else {
                log('‚úÖ Modo hardware activo', 'green');
                log('   üîå Los rel√©s se controlan f√≠sicamente', 'blue');
                log('   ‚ö†Ô∏è  ¬°CUIDADO! Los rel√©s se activar√°n realmente', 'yellow');
            }
        } catch (error) {
            log(`‚ö†Ô∏è  No se pudo verificar modo: ${error.message}`, 'yellow');
        }

        // Resumen final
        console.log('\n' + '='.repeat(60));
        log('\nüéâ ¬°PRUEBA DE LOS REL√âS COMPLETADA!', 'green');
        log('\nüìã Resumen:', 'cyan');
        log('‚úÖ M√≥dulo cargado correctamente', 'green');
        log('‚úÖ Controlador inicializado', 'green');
        log('‚úÖ Estados verificados', 'green');
        log('‚úÖ Control individual probado', 'green');
        log('‚úÖ Control m√∫ltiple probado', 'green');
        log('‚úÖ Modo de operaci√≥n verificado', 'green');
        
        log('\nüîå Los rel√©s est√°n funcionando correctamente', 'green');
        log('   En modo simulaci√≥n para desarrollo seguro', 'blue');
        
        console.log('\n' + '='.repeat(60));
        log('\nüå± Sistema de Hidropon√≠a Automatizado - Ing. Daril D√≠az ¬© 2024', 'magenta');

    } catch (error) {
        log(`\n‚ùå Error durante la prueba: ${error.message}`, 'red');
        process.exit(1);
    }
}

// Ejecutar prueba
if (require.main === module) {
    testRelays();
}

module.exports = { testRelays }; 