#!/usr/bin/env node

/**
 * Prueba del Sensor DHT11
 * Sistema de Hidropon√≠a Automatizado
 * Ing. Daril D√≠az - 2024
 */

const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(colors[color] + message + colors.reset);
}

async function testDHT11() {
    try {
        log('\nüå°Ô∏è  PRUEBA DEL SENSOR DHT11', 'magenta');
        log('üîß Sistema de Hidropon√≠a Automatizado', 'cyan');
        log('üë®‚Äçüíª Ing. Daril D√≠az - 2024', 'blue');
        log('='.repeat(60), 'cyan');

        // Paso 1: Verificar que el m√≥dulo existe
        log('\n[1] Verificando m√≥dulo DHT11...', 'cyan');
        if (!require('fs').existsSync('./dht11_sensor.js')) {
            log('‚ùå M√≥dulo dht11_sensor.js no encontrado', 'red');
            return;
        }
        log('‚úÖ M√≥dulo dht11_sensor.js encontrado', 'green');

        // Paso 2: Cargar el m√≥dulo
        log('\n[2] Cargando m√≥dulo DHT11...', 'cyan');
        let DHT11Sensor;
        try {
            DHT11Sensor = require('./dht11_sensor.js');
            log('‚úÖ M√≥dulo DHT11 cargado correctamente', 'green');
        } catch (error) {
            log(`‚ùå Error cargando m√≥dulo: ${error.message}`, 'red');
            return;
        }

        // Paso 3: Crear instancia del sensor
        log('\n[3] Creando instancia del sensor...', 'cyan');
        let sensor;
        try {
            sensor = new DHT11Sensor(4); // GPIO 4
            log('‚úÖ Instancia del sensor creada', 'green');
        } catch (error) {
            log(`‚ùå Error creando instancia: ${error.message}`, 'red');
            return;
        }

        // Paso 4: Probar lectura del sensor
        log('\n[4] Probando lectura del sensor...', 'cyan');
        log('üìä Realizando 5 lecturas de prueba...', 'yellow');
        
        for (let i = 1; i <= 5; i++) {
            try {
                log(`\n   Lectura ${i}:`, 'cyan');
                
                const startTime = Date.now();
                const reading = sensor.read();
                const endTime = Date.now();
                const responseTime = endTime - startTime;
                
                if (reading) {
                    log(`   ‚úÖ Temperatura: ${reading.temperature}¬∞C`, 'green');
                    log(`   ‚úÖ Humedad: ${reading.humidity}%`, 'green');
                    log(`   ‚úÖ Tiempo de respuesta: ${responseTime}ms`, 'blue');
                    
                    // Verificar rangos v√°lidos
                    if (reading.temperature >= -40 && reading.temperature <= 80) {
                        log(`   ‚úÖ Temperatura en rango v√°lido`, 'green');
                    } else {
                        log(`   ‚ö†Ô∏è  Temperatura fuera de rango normal`, 'yellow');
                    }
                    
                    if (reading.humidity >= 0 && reading.humidity <= 100) {
                        log(`   ‚úÖ Humedad en rango v√°lido`, 'green');
                    } else {
                        log(`   ‚ö†Ô∏è  Humedad fuera de rango normal`, 'yellow');
                    }
                } else {
                    log(`   ‚ùå Lectura fallida`, 'red');
                }
                
                // Esperar entre lecturas
                if (i < 5) {
                    log(`   ‚è≥ Esperando 2 segundos...`, 'yellow');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
                
            } catch (error) {
                log(`   ‚ùå Error en lectura ${i}: ${error.message}`, 'red');
            }
        }

        // Paso 5: Probar modo simulaci√≥n
        log('\n[5] Probando modo simulaci√≥n...', 'cyan');
        try {
            if (sensor.isSimulationMode) {
                log('‚úÖ Modo simulaci√≥n activo', 'green');
                log('   üì± Generando datos simulados para desarrollo', 'blue');
            } else {
                log('‚úÖ Modo hardware activo', 'green');
                log('   üîå Conectado a sensor f√≠sico DHT11', 'blue');
            }
        } catch (error) {
            log(`‚ö†Ô∏è  No se pudo verificar modo: ${error.message}`, 'yellow');
        }

        // Paso 6: Verificar informaci√≥n del sensor
        log('\n[6] Informaci√≥n del sensor...', 'cyan');
        try {
            const info = sensor.getInfo();
            log(`   üìç Pin GPIO: ${info.gpioPin}`, 'blue');
            log(`   üîß Tipo: ${info.type}`, 'blue');
            log(`   üìä Resoluci√≥n: ${info.resolution}`, 'blue');
            log(`   ‚ö° Voltaje: ${info.voltage}V`, 'blue');
        } catch (error) {
            log(`   ‚ö†Ô∏è  No se pudo obtener informaci√≥n: ${error.message}`, 'yellow');
        }

        // Resumen final
        console.log('\n' + '='.repeat(60));
        log('\nüéâ ¬°PRUEBA DEL SENSOR DHT11 COMPLETADA!', 'green');
        log('\nüìã Resumen:', 'cyan');
        log('‚úÖ M√≥dulo cargado correctamente', 'green');
        log('‚úÖ Instancia creada', 'green');
        log('‚úÖ Lecturas realizadas', 'green');
        log('‚úÖ Modo verificado', 'green');
        
        log('\nüå°Ô∏è  El sensor DHT11 est√° funcionando correctamente', 'green');
        log('   Puede ser en modo simulaci√≥n (normal en Windows) o hardware', 'blue');
        
        console.log('\n' + '='.repeat(60));
        log('\nüå± Sistema de Hidropon√≠a Automatizado - Ing. Daril D√≠az ¬© 2024', 'magenta');

    } catch (error) {
        log(`\n‚ùå Error durante la prueba: ${error.message}`, 'red');
        process.exit(1);
    }
}

// Ejecutar prueba
if (require.main === module) {
    testDHT11();
}

module.exports = { testDHT11 }; 